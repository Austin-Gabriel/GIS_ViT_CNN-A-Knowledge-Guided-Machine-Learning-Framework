{"cells":[{"cell_type":"markdown","metadata":{"id":"6ppXSQT2LXCm"},"source":["# Connecting to Git for version control and Google Drive to retrieve the data"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":38611,"status":"ok","timestamp":1732526226124,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"},"user_tz":300},"id":"NVkQcQkE3bjB","outputId":"97a2c60f-f8cb-4c8d-e295-a0778bd9c675"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":8,"status":"aborted","timestamp":1732522438695,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"},"user_tz":300},"id":"ciWt8xc5tujY"},"outputs":[],"source":["#connect to github repo\n","!git clone https://github.com/Austin-Gabriel/IEEE_Computer_Vision_Project.git"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":152,"status":"ok","timestamp":1732504730166,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"},"user_tz":300},"id":"pKT34xYkt0oP","outputId":"39d6934c-4727-4d0f-fc63-0970a58f297d"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/IEEE_Computer_Vision_Project\n"]}],"source":["cd /content/IEEE_Computer_Vision_Project/"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":191,"status":"ok","timestamp":1732523172323,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"},"user_tz":300},"id":"PRrBb-PEwj5H","outputId":"fcc50c3c-32ac-47d1-a7ba-dad4753486fd"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content\n"]}],"source":["!pwd"]},{"cell_type":"markdown","source":["# syncing to github"],"metadata":{"id":"Sc5PHtDuZKfW"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"rtCPmFqyVlFc"},"outputs":[],"source":["#zip_directory = \"/content/drive/MyDrive/data\"\n","#new_directory = \"/content/drive/MyDrive/satellite_data\"\n","#zip_filenames = ['annotations.zip', 'uspp_landsat.zip', 'uspp_naip.zip']\n","\n","#for zip_filename in zip_filenames:\n","#    zip_path = os.path.join(zip_directory, zip_filename)\n","#    with ZipFile(zip_path, 'r') as zip_file:\n","#        extraction_path = os.path.join(new_directory, zip_filename.replace('.zip', ''))\n","#        zip_file.extractall(extraction_path)\n","#        print(f\"Extracted {zip_filename} to {extraction_path}\")"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":30828,"status":"ok","timestamp":1732504782311,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"},"user_tz":300},"id":"r21Cyc5eV3nD","outputId":"08ac26bd-6710-4256-f9c3-9cf9fd4bf3e9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Unique values in binary mask: [  0 255]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/rasterio/__init__.py:355: NotGeoreferencedWarning: Dataset has no geotransform, gcps, or rpcs. The identity matrix will be returned.\n","  dataset = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["Landsat image shape: (3, 76, 75)\n","NAIP image shape: (4, 1114, 1114)\n"]}],"source":["# Install rasterio\n","\n","from PIL import Image\n","import numpy as np\n","\n","# Load binary mask\n","binary_mask_path = '/content/drive/MyDrive/satellite_data/annotations/annotations/binary/bilabels_1002.png'\n","binary_mask = Image.open(binary_mask_path)\n","binary_array = np.array(binary_mask)\n","\n","# Check if the mask has binary values\n","print(\"Unique values in binary mask:\", np.unique(binary_array))\n","\n","# Load a Landsat image using rasterio\n","landsat_path = '/content/drive/MyDrive/satellite_data/uspp_landsat/uspp_landsat/ls8_1002_CA_SUN.tif'\n","with rasterio.open(landsat_path) as src:\n","    landsat_image = src.read()  # Reads all bands\n","    print(\"Landsat image shape:\", landsat_image.shape)  # Should be (bands, height, width)\n","\n","# Load NAIP image\n","naip_path = '/content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip/naip_1002_CA_SUN.tif'\n","with rasterio.open(naip_path) as src:\n","    naip_image = src.read()\n","    print(\"NAIP image shape:\", naip_image.shape)\n"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3494,"status":"ok","timestamp":1732504785801,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"},"user_tz":300},"id":"0Wc7213mGaUB","outputId":"0ddf2f47-772d-4a1a-9837-2da19de9222a"},"outputs":[{"output_type":"stream","name":"stdout","text":["NAIP image shape for /content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip/naip_4275_MN_SUB.tif: (4, 1115, 1114)\n","NAIP image shape for /content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip/naip_4276_MN_WAT.tif: (4, 1115, 1114)\n","NAIP image shape for /content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip/naip_4278_MN_WND.tif: (4, 1115, 1114)\n","NAIP image shape for /content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip/naip_4279_MN_WND.tif: (4, 1114, 1114)\n","NAIP image shape for /content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip/naip_4284_MN_WND.tif: (4, 1114, 1114)\n","NAIP image shape for /content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip/naip_4287_MN_WND.tif: (4, 1115, 1115)\n","NAIP image shape for /content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip/naip_4288_MN_WND.tif: (4, 1114, 1114)\n","NAIP image shape for /content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip/naip_4289_MN_WND.tif: (4, 1114, 1114)\n","NAIP image shape for /content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip/naip_428_CA_NG.tif: (4, 1114, 1114)\n","NAIP image shape for /content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip/naip_4298_MN_NG.tif: (4, 1114, 1114)\n"]}],"source":["def read_10_naip_files(naip_folder_path):\n","  # Reads 10 NAIP files from the given folder.\n","\n","  naip_files = []\n","  for filename in os.listdir(naip_folder_path):\n","    if filename.endswith('.tif'):\n","      naip_files.append(os.path.join(naip_folder_path, filename))\n","      if len(naip_files) == 10:\n","        break\n","\n","  return naip_files\n","\n","naip_folder_path = '/content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip'\n","naip_files = read_10_naip_files(naip_folder_path)\n","\n","for naip_file in naip_files:\n","  with rasterio.open(naip_file) as src:\n","    naip_image = src.read()\n","    print(f\"NAIP image shape for {naip_file}:\", naip_image.shape)"]},{"cell_type":"markdown","metadata":{"id":"cU9prWkACg6t"},"source":["## Dataset Insights\n","1. The dataset contains 4,454 power plants across the US\n","2. The images come from two sources (NAIP 1m resolution and Landsat 8 30m resolution)\n","3. The naming convention for the landsat files are naip_253_AR_NG.tif or ls8_253_AR_NG.tif, contains:\n","\n","    Power plant ID (e.g., 253).\n","    State Code (e.g., AR for Arkansas).\n","    Fuel Type Code (e.g., NG for natural gas).\n","\n","4. The binary masks are used for marking the area covered by each power plant, used to guide the model's focus during training.\n","5. The confidence annotations aggregate outputs from the annotators to ensure accuracy and the accepted_ann_json.txt files contain detailed polygon boundaries.\n"]},{"cell_type":"markdown","metadata":{"id":"lGhqn4fpFo79"},"source":["# Setting up the data pipeline"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"f0QMyFe2FriI","executionInfo":{"status":"ok","timestamp":1732504797579,"user_tz":300,"elapsed":7303,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"}}},"outputs":[],"source":["import glob\n","from torchvision import transforms\n","import torch\n","\n","naip_path = '/content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip'\n","landsat_path = '/content/drive/MyDrive/satellite_data/uspp_landsat/uspp_landsat'\n","annotations_path = '/content/drive/MyDrive/satellite_data/annotations/annotations/binary'\n","\n","transform = transforms.Compose([\n","    transforms.Resize((224,224)), # resize images\n","    transforms.ToTensor(), # covert to tensor\n","    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]) # normalize images\n","])"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":169,"status":"ok","timestamp":1732504797746,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"},"user_tz":300},"id":"nYn7EFXeH2XO","outputId":"93fffb29-4d59-4ff5-c80d-1a7461714f2d"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Grouped Image Data (Sample):\n","Plant ID: 4275\n","  NAIP: /content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip/naip_4275_MN_SUB.tif\n","  Landsat: /content/drive/MyDrive/satellite_data/uspp_landsat/uspp_landsat/ls8_4275_MN_SUB.tif\n","  Mask: /content/drive/MyDrive/satellite_data/annotations/annotations/binary/bilabels_4275.png\n","  Type: SUB\n","\n","\n","Plant ID: 4276\n","  NAIP: /content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip/naip_4276_MN_WAT.tif\n","  Landsat: /content/drive/MyDrive/satellite_data/uspp_landsat/uspp_landsat/ls8_4276_MN_WAT.tif\n","  Mask: /content/drive/MyDrive/satellite_data/annotations/annotations/binary/bilabels_4276.png\n","  Type: WAT\n","\n","\n","Plant ID: 4278\n","  NAIP: /content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip/naip_4278_MN_WND.tif\n","  Landsat: /content/drive/MyDrive/satellite_data/uspp_landsat/uspp_landsat/ls8_4278_MN_WND.tif\n","  Mask: /content/drive/MyDrive/satellite_data/annotations/annotations/binary/bilabels_4278.png\n","  Type: WND\n","\n","\n","Plant ID: 4279\n","  NAIP: /content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip/naip_4279_MN_WND.tif\n","  Landsat: /content/drive/MyDrive/satellite_data/uspp_landsat/uspp_landsat/ls8_4279_MN_WND.tif\n","  Mask: /content/drive/MyDrive/satellite_data/annotations/annotations/binary/bilabels_4279.png\n","  Type: WND\n","\n","\n","Plant ID: 4284\n","  NAIP: /content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip/naip_4284_MN_WND.tif\n","  Landsat: /content/drive/MyDrive/satellite_data/uspp_landsat/uspp_landsat/ls8_4284_MN_WND.tif\n","  Mask: /content/drive/MyDrive/satellite_data/annotations/annotations/binary/bilabels_4284.png\n","  Type: WND\n","\n","\n"]}],"source":["import os\n","import glob\n","\n","def get_image_groups(naip_path, landsat_path, annotations_path):\n","    image_groups = {}\n","    plant_types = set()  # Use set to store unique plant types\n","\n","    naip_files = glob.glob(os.path.join(naip_path, '*.tif'))\n","    landsat_files = glob.glob(os.path.join(landsat_path, '*.tif'))\n","    mask_files = glob.glob(os.path.join(annotations_path, '*.png'))\n","\n","    # Organize by ID and extract fuel type\n","    for file_list, img_type in [(naip_files, 'NAIP'), (landsat_files, 'Landsat'), (mask_files, 'Mask')]:\n","        for file_path in file_list:\n","            base_name = os.path.basename(file_path)\n","\n","            # Extract ID and type based on the file naming convention\n","            if img_type in ['NAIP', 'Landsat']:\n","                plant_id = base_name.split('_')[1]  # e.g., 'naip_4275_MN_SUB.tif' -> '4275'\n","                plant_type = base_name.split('_')[-1].split('.')[0]  # e.g., 'naip_4275_MN_SUB.tif' -> 'SUB'\n","                plant_types.add(plant_type)  # Add the plant type to the set of types\n","            elif img_type == 'Mask':\n","                plant_id = base_name.split('_')[1].split('.')[0]  # e.g., 'bilabels_4275.png' -> '4275'\n","                plant_type = image_groups.get(plant_id, {}).get('Type', 'Unknown')  # Use existing type if available\n","\n","            # Initialize a new entry if not present\n","            if plant_id not in image_groups:\n","                image_groups[plant_id] = {'NAIP': None, 'Landsat': None, 'Mask': None, 'Type': plant_type}\n","\n","            # Assign file path based on the type and store the type information\n","            image_groups[plant_id][img_type] = file_path\n","            image_groups[plant_id]['Type'] = plant_type  # Store plant type\n","\n","    return image_groups, plant_types\n","\n","image_groups, plant_types = get_image_groups(naip_path, landsat_path, annotations_path)\n","\n","print(\"\\nGrouped Image Data (Sample):\")\n","for plant_id, images in list(image_groups.items())[:5]:\n","    print(f\"Plant ID: {plant_id}\")\n","    for img_type, path in images.items():\n","        print(f\"  {img_type}: {path}\")\n","    print(\"\\n\")\n"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1732504797746,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"},"user_tz":300},"id":"UEeU2fR-Nxb8","outputId":"7e78e993-e8c8-402b-8486-c30ff711c03b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Unique Plant Types in Dataset:\n","\n","AB\n","BFG\n","BIT\n","BLQ\n","COG\n","DFO\n","GEO\n","KER\n","LFG\n","LIG\n","MSW\n","MWH\n","NG\n","NUC\n","OBG\n","OBS\n","OG\n","OTH\n","PC\n","PRG\n","PUR\n","RFO\n","SGC\n","SLW\n","SUB\n","SUN\n","WAT\n","WC\n","WDL\n","WDS\n","WH\n","WND\n"]}],"source":["print(\"Unique Plant Types in Dataset:\")\n","for plant_type in sorted(plant_types):\n","    print(plant_type)"]},{"cell_type":"markdown","metadata":{"id":"ddAv5AqtTwh6"},"source":["# Preprocessing data\n","In this step we will\n","  1. Filter the dataset to include data from the six plants: Natural Gas, Subbituminous Coal, Natural Gas, Hydo, Solar and Wind\n","  2. Run exploratory stats on the data\n","  3. Display the sample images with the binary masks\n"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1732504797746,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"},"user_tz":300},"id":"3aNpzTOGQd1G","outputId":"726549e7-e1de-49c8-d038-3e4df1a37781"},"outputs":[{"output_type":"stream","name":"stdout","text":["Before filtering: 4454\n","After filtering: 2262\n"]}],"source":["desired_types = {'WND', 'SUN', 'BIT', 'NG', 'WAT'}\n","filtered_image_groups = {\n","    plant_id: data\n","    for plant_id, data in image_groups.items()\n","    if data['NAIP'] and data['Mask'] and data['Type'] in desired_types\n","}\n","\n","print(f\"Before filtering: {len(image_groups)}\")\n","print(f\"After filtering: {len(filtered_image_groups)}\")\n"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1732504797746,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"},"user_tz":300},"id":"hUXnH8MYB5C7","outputId":"45bee9f8-683f-4b80-cd80-6057abb60afd"},"outputs":[{"output_type":"stream","name":"stdout","text":["Images in original dataset: 4454\n","Images remaining after filtering: 2262\n","Images dropped: 2192\n","\n","Images in each category after filtering:\n","  WAT: 376\n","  WND: 296\n","  NG: 765\n","  SUN: 707\n","  BIT: 118\n","\n","Filtered Image Data (Sample):\n","Plant ID: 4276\n","  NAIP: /content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip/naip_4276_MN_WAT.tif\n","  Mask: /content/drive/MyDrive/satellite_data/annotations/annotations/binary/bilabels_4276.png\n","  Type: WAT\n","\n","Plant ID: 4278\n","  NAIP: /content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip/naip_4278_MN_WND.tif\n","  Mask: /content/drive/MyDrive/satellite_data/annotations/annotations/binary/bilabels_4278.png\n","  Type: WND\n","\n","Plant ID: 4279\n","  NAIP: /content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip/naip_4279_MN_WND.tif\n","  Mask: /content/drive/MyDrive/satellite_data/annotations/annotations/binary/bilabels_4279.png\n","  Type: WND\n","\n","Plant ID: 4284\n","  NAIP: /content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip/naip_4284_MN_WND.tif\n","  Mask: /content/drive/MyDrive/satellite_data/annotations/annotations/binary/bilabels_4284.png\n","  Type: WND\n","\n","Plant ID: 4287\n","  NAIP: /content/drive/MyDrive/satellite_data/uspp_naip/uspp_naip/naip_4287_MN_WND.tif\n","  Mask: /content/drive/MyDrive/satellite_data/annotations/annotations/binary/bilabels_4287.png\n","  Type: WND\n","\n"]}],"source":["\n","total_count = len(image_groups)\n","remaining_count = len(filtered_image_groups)\n","dropped_count = total_count - remaining_count\n","\n","# Count each type within the filtered dataset\n","type_counts = {}\n","for images in filtered_image_groups.values():\n","    plant_type = images['Type']\n","    type_counts[plant_type] = type_counts.get(plant_type, 0) + 1\n","\n","# statistics\n","print(f\"Images in original dataset: {total_count}\")\n","print(f\"Images remaining after filtering: {remaining_count}\")\n","print(f\"Images dropped: {dropped_count}\\n\")\n","print(\"Images in each category after filtering:\")\n","for plant_type, count in type_counts.items():\n","    print(f\"  {plant_type}: {count}\")\n","\n","# Display filtered sample\n","print(\"\\nFiltered Image Data (Sample):\")\n","for plant_id, data in list(filtered_image_groups.items())[:5]:\n","    print(f\"Plant ID: {plant_id}\")\n","    print(f\"  NAIP: {data['NAIP']}\")\n","    print(f\"  Mask: {data['Mask']}\")\n","    print(f\"  Type: {data['Type']}\")\n","    print()\n"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1T197HTg7OOHlvf8EBp_cDbyegX59HOBx"},"executionInfo":{"elapsed":5635,"status":"ok","timestamp":1732504805894,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"},"user_tz":300},"id":"P6btLJ8pWUZM","outputId":"e386c820-adad-4291-ba5d-d38339e27cae"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["import matplotlib.pyplot as plt\n","\n","def display_sample_images(image_groups, transform, num_samples=5):\n","    sample_ids = list(image_groups.keys())[:num_samples]\n","\n","    for plant_id in sample_ids:\n","        naip_image_path = image_groups[plant_id]['NAIP']\n","        mask_path = image_groups[plant_id]['Mask']\n","        plant_type = image_groups[plant_id]['Type']  # plant type\n","\n","        if naip_image_path and mask_path:\n","            naip_image = Image.open(naip_image_path).convert('RGB')\n","            mask_image = Image.open(mask_path)\n","\n","            # Transform image\n","            transformed_image = transform(naip_image)\n","\n","            # Convert tensors to numpy array for display\n","            original_image_np = np.array(naip_image)\n","            transformed_image_np = transformed_image.permute(1, 2, 0).numpy()\n","            mask_np = np.array(mask_image)\n","\n","            # original, transformed, and mask images\n","            fig, axs = plt.subplots(1, 3, figsize=(15, 5))\n","\n","            axs[0].imshow(original_image_np)\n","            axs[0].set_title(f\"Original NAIP Image (ID: {plant_id}, Type: {plant_type})\")\n","            axs[0].axis('off')\n","\n","            axs[1].imshow(transformed_image_np)\n","            axs[1].set_title(f\"Transformed NAIP Image (ID: {plant_id}, Type: {plant_type})\")\n","            axs[1].axis('off')\n","\n","            axs[2].imshow(mask_np, cmap='gray')\n","            axs[2].set_title('Binary Mask')\n","            axs[2].axis('off')\n","\n","            plt.tight_layout()\n","            plt.show()\n","\n","# sampke images with the function\n","display_sample_images(filtered_image_groups, transform)\n"]},{"cell_type":"markdown","metadata":{"id":"Nxp9EP-yTl9E"},"source":["# Model Development\n","The current goal is to build four models: The ViT-B/16 w/o masks,  ViT-B/16 w mask, GeoViT w/o masks, GeoVit w masks\n","  1. For data preparation the ViT processes images in patches (32x32,16x16 and 14x14 for the ViT-B/16, dependent on the trade off of finer patches for higher computational costs)\n","  2. Each power plant type has to be converted into a label:\n","    NG (Natural Gas) → 0\n","    SUN (Solar) → 1\n","    WND (Wind) → 2\n","    BIT (Bitumen) → 3\n","    WAT (Hydro) → 4\n","\n","\n","## ImageNet21k-pretrained ViT-B/16 without Binary Masks\n","We will be using the RGB channels in NAIP images and customizing the model output layer to match the five classes\n","\n","## Data Split and Load Setup"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1986,"status":"ok","timestamp":1732504807877,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"},"user_tz":300},"id":"--g9SCRuWg57","outputId":"487853f7-e7d3-4450-a231-512f8a747954"},"outputs":[{"output_type":"stream","name":"stdout","text":["Total IDs: 2262\n","Train/Validation IDs: 1583\n","Test IDs: 679\n","\n","Test set distribution by type:\n","{'BIT': 35, 'NG': 230, 'SUN': 212, 'WAT': 113, 'WND': 89}\n"]}],"source":["from sklearn.model_selection import train_test_split\n","\n","# Extract IDs and types for stratified splitting\n","ids = list(filtered_image_groups.keys())\n","types = [filtered_image_groups[plant_id]['Type'] for plant_id in ids]\n","\n","# Stratified test split\n","train_ids, test_ids = train_test_split(\n","    ids, test_size=0.3, stratify=types, random_state=42\n",")\n","\n","print(f\"Total IDs: {len(filtered_image_groups)}\")\n","print(f\"Train/Validation IDs: {len(train_ids)}\")\n","print(f\"Test IDs: {len(test_ids)}\")\n","\n","# distribution of test set\n","test_types = [filtered_image_groups[plant_id]['Type'] for plant_id in test_ids]\n","unique, counts = np.unique(test_types, return_counts=True)\n","print(\"\\nTest set distribution by type:\")\n","print(dict(zip(unique, counts)))\n"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1732504807878,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"},"user_tz":300},"id":"VyPmMYvicbwZ","outputId":"c537be0b-da8e-4b2f-844f-a0a1d2cab162"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Fold 1:\n","Training set size: 1187\n","Validation set size: 396\n","Validation set distribution by type:\n","{'BIT': 21, 'NG': 134, 'SUN': 124, 'WAT': 65, 'WND': 52}\n","\n","Fold 2:\n","Training set size: 1187\n","Validation set size: 396\n","Validation set distribution by type:\n","{'BIT': 21, 'NG': 134, 'SUN': 124, 'WAT': 66, 'WND': 51}\n","\n","Fold 3:\n","Training set size: 1187\n","Validation set size: 396\n","Validation set distribution by type:\n","{'BIT': 21, 'NG': 134, 'SUN': 123, 'WAT': 66, 'WND': 52}\n","\n","Fold 4:\n","Training set size: 1188\n","Validation set size: 395\n","Validation set distribution by type:\n","{'BIT': 20, 'NG': 133, 'SUN': 124, 'WAT': 66, 'WND': 52}\n"]}],"source":["# k-Fold cross-validation setup\n","from sklearn.model_selection import StratifiedKFold\n","\n","def k_fold_split(train_ids, filtered_image_groups):\n","  train_types = [filtered_image_groups[plant_id]['Type'] for plant_id in train_ids]\n","  skf = StratifiedKFold(n_splits=4, shuffle=True, random_state=42)\n","\n","  folds = []\n","  for train_index, val_index in skf.split(train_ids, train_types):\n","    train_folds_ids = [train_ids[i] for i in train_index]\n","    val_folds_ids = [train_ids[i] for i in val_index]\n","    folds.append((train_folds_ids, val_folds_ids))\n","\n","  return folds\n","\n","folds = k_fold_split(train_ids, filtered_image_groups)\n","\n","for i, (train_ids, val_ids) in enumerate(folds):\n","  print(f\"\\nFold {i+1}:\")\n","  print(f\"Training set size: {len(train_ids)}\")\n","  print(f\"Validation set size: {len(val_ids)}\")\n","\n","  val_types = [filtered_image_groups[plant_id]['Type'] for plant_id in val_ids]\n","  unique, counts = np.unique(val_types, return_counts=True)\n","  print(\"Validation set distribution by type:\")\n","  print(dict(zip(unique, counts)))"]},{"cell_type":"markdown","metadata":{"id":"0QwqXfHd8jsE"},"source":["Creating a Dataset Class\n","\n","This class will:\n","\n","    Take in the list of image IDs (from each fold).\n","    Load the NAIP image and corresponding mask for each ID.\n","    Apply transformations to prepare the images for input into the ViT model."]},{"cell_type":"code","execution_count":17,"metadata":{"id":"WILOyt_pUKxk","executionInfo":{"status":"ok","timestamp":1732504827976,"user_tz":300,"elapsed":146,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"}}},"outputs":[],"source":["# The code below is for the dataset without masks\n","\n","from torch.utils.data import Dataset\n","from torch.utils.data import DataLoader\n","from PIL import Image\n","import torch\n","\n","class PowerPlantDataset(Dataset):\n","    def __init__(self, image_groups, ids, transform, use_mask=False):\n","        self.image_groups = image_groups\n","        self.ids = ids\n","        self.transform = transform\n","        self.use_mask = use_mask  # Flag to control if we load masks\n","\n","    def __len__(self):\n","        return len(self.ids)\n","\n","    def __getitem__(self, idx):\n","        plant_id = self.ids[idx]\n","        naip_path = self.image_groups[plant_id]['NAIP']\n","        label = self.get_label(self.image_groups[plant_id]['Type'])\n","\n","        # Load and transform the NAIP image\n","        naip_image = Image.open(naip_path).convert('RGB')\n","        if self.transform:\n","            naip_image = self.transform(naip_image)\n","\n","        # Only load the mask if `use_mask` is True\n","        if self.use_mask:\n","            mask_path = self.image_groups[plant_id]['Mask']\n","            mask_image = Image.open(mask_path)\n","            mask_image = torch.tensor(np.array(mask_image), dtype=torch.float32).unsqueeze(0)\n","            mask_image = torch.nn.functional.interpolate(\n","                mask_image.unsqueeze(0), size=(224, 224), mode='nearest'\n","            ).squeeze(0)\n","            return naip_image, mask_image, label\n","        else:\n","            return naip_image, label  # Return only NAIP image and label\n","\n","    def get_label(self, plant_type):\n","        type_to_label = {'WND': 0, 'SUN': 1, 'BIT': 2, 'NG': 3, 'WAT': 4}\n","        return type_to_label.get(plant_type, -1)\n","\n","# Creating DataLoader without masks for training and validation\n","train_dataset = PowerPlantDataset(filtered_image_groups, train_ids, transform, use_mask=False)\n","val_dataset = PowerPlantDataset(filtered_image_groups, val_ids, transform, use_mask=False)\n","test_dataset = PowerPlantDataset(filtered_image_groups, test_ids, transform, use_mask=False)\n","\n","train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n","val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)\n","test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"Y6AlDnBGUSSA","executionInfo":{"status":"ok","timestamp":1732504835359,"user_tz":300,"elapsed":152,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"}}},"outputs":[],"source":["from torch.nn.functional import softmax\n","\n","def train_one_epoch(model, train_loader, criterion, optimizer, device):\n","    model.train()\n","    total_loss = 0\n","    correct = 0\n","    total = 0\n","\n","    for images, labels in train_loader:\n","        # Move data to GPU/CPU\n","        images, labels = images.to(device), labels.to(device)\n","\n","        # Forward pass\n","        outputs = model(images).logits\n","        loss = criterion(outputs, labels)\n","        total_loss += loss.item()\n","\n","        # Backward pass\n","        optimizer.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","\n","        # Accuracy calculation\n","        predictions = torch.argmax(softmax(outputs, dim=1), dim=1)\n","        correct += (predictions == labels).sum().item()\n","        total += labels.size(0)\n","\n","    avg_loss = total_loss / len(train_loader)\n","    accuracy = correct / total * 100\n","\n","    return avg_loss, accuracy\n","\n","# Validation function\n","def validate(model, val_loader, criterion, device):\n","    model.eval()\n","    total_loss = 0\n","    correct = 0\n","    total = 0\n","\n","    with torch.no_grad():\n","        for images, labels in val_loader:\n","            images, labels = images.to(device), labels.to(device)\n","\n","            # Forward pass\n","            outputs = model(images).logits\n","            loss = criterion(outputs, labels)\n","            total_loss += loss.item()\n","\n","            # Accuracy\n","            predictions = torch.argmax(softmax(outputs, dim=1), dim=1)\n","            correct += (predictions == labels).sum().item()\n","            total += labels.size(0)\n","\n","    avg_loss = total_loss / len(val_loader)\n","    accuracy = correct / total * 100\n","\n","    return avg_loss, accuracy\n"]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":349,"status":"ok","timestamp":1732504838248,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"},"user_tz":300},"id":"NxZirECEM4gL","outputId":"1aa1e7a7-0f7d-46b4-fbd4-232872dd790c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mon Nov 25 03:20:37 2024       \n","+---------------------------------------------------------------------------------------+\n","| NVIDIA-SMI 535.104.05             Driver Version: 535.104.05   CUDA Version: 12.2     |\n","|-----------------------------------------+----------------------+----------------------+\n","| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |\n","|                                         |                      |               MIG M. |\n","|=========================================+======================+======================|\n","|   0  NVIDIA A100-SXM4-40GB          Off | 00000000:00:04.0 Off |                    0 |\n","| N/A   30C    P0              48W / 400W |      2MiB / 40960MiB |      0%      Default |\n","|                                         |                      |             Disabled |\n","+-----------------------------------------+----------------------+----------------------+\n","                                                                                         \n","+---------------------------------------------------------------------------------------+\n","| Processes:                                                                            |\n","|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |\n","|        ID   ID                                                             Usage      |\n","|=======================================================================================|\n","|  No running processes found                                                           |\n","+---------------------------------------------------------------------------------------+\n","Your runtime has 89.6 GB of available RAM\n"]}],"source":["# upgraded to collab pro\n","gpu_info = !nvidia-smi\n","print(\"\\n\".join(gpu_info))\n","\n","from psutil import virtual_memory\n","ram_gb = virtual_memory().total / 1e9\n","print(f\"Your runtime has {ram_gb:.1f} GB of available RAM\")\n"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":244,"referenced_widgets":["7a940f0d95c24e53a3e913384cbdcde3","2fe176478a894307bc62a6df4be67a39","83b942c94a3b4a9791fd1f37481b5e55","1bc9a71fdeb646de8b4ea765561e716d","1038809f00f44c1d8a10412a0a745657","47014c5c4cfa401b8fc4f710ff8e0007","bce91a13aac4447291bbd4b2cceca67f","bb5d11eb8c734ed9a01038f4d36f7bdf","39dea993186b4a439504592a115b4e1e","2c738cec7c964b77a771e0dedbe5f7b0","ea792b859bde44f188e11dbfd8f612c3","fe49dcc5bd2b4791b9c1efdd7ef90da1","ac6e408382ee46eaaea1fd60f492db62","20558f5bfef64e38a4d7624b400a15f8","78a37c931f104b15a7a2e6262f4479d9","4c6a217eadf743af8e6f7a4c94259e90","8283a440962a427cb5842daad19a0005","a4fef16549474016825e76ea1218bc14","f5c6c481024c454eba2977587c16d0e6","5c61926598d640baaa6806efb8bec72b","31b9100f92bf430e8d81122bad4cd737","67d5abbad1d4440d84e6709ab4dd53ee"]},"executionInfo":{"elapsed":7135,"status":"ok","timestamp":1732504847393,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"},"user_tz":300},"id":"oZMYo2VMFHzG","outputId":"43139cae-5954-4a11-89a1-0a3c1a76324d"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n","The secret `HF_TOKEN` does not exist in your Colab secrets.\n","To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n","You will be able to reuse this secret in all of your notebooks.\n","Please note that authentication is recommended but still optional to access public models or datasets.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["config.json:   0%|          | 0.00/502 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7a940f0d95c24e53a3e913384cbdcde3"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["model.safetensors:   0%|          | 0.00/346M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"fe49dcc5bd2b4791b9c1efdd7ef90da1"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["Some weights of ViTForImageClassification were not initialized from the model checkpoint at google/vit-base-patch16-224-in21k and are newly initialized: ['classifier.bias', 'classifier.weight']\n","You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"]}],"source":["import torch.nn as nn\n","from transformers import ViTForImageClassification\n","\n","model = ViTForImageClassification.from_pretrained(\"google/vit-base-patch16-224-in21k\")\n","model.classifier = nn.Linear(model.config.hidden_size, 5)"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"Ftefdv-2EHmR","executionInfo":{"status":"ok","timestamp":1732504847393,"user_tz":300,"elapsed":3,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"}}},"outputs":[],"source":["import torch.optim as optim\n","\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.AdamW(model.parameters(), lr=5e-5)"]},{"cell_type":"code","execution_count":28,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":365},"executionInfo":{"elapsed":3001,"status":"error","timestamp":1732505363448,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"},"user_tz":300},"id":"BpEPQqjaUki7","outputId":"26227fbf-a9c8-46ae-ec24-9b03d4059383","collapsed":true},"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-28-5584351e45ed>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mnum_epochs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mepoch\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_epochs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mtrain_loss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_acc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_one_epoch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_loader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptimizer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0mval_loss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_acc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalidate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_loader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-18-8972e3d796f8>\u001b[0m in \u001b[0;36mtrain_one_epoch\u001b[0;34m(model, train_loader, criterion, optimizer, device)\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0mtotal\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mimages\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrain_loader\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m         \u001b[0;31m# Move data to GPU/CPU\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m         \u001b[0mimages\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimages\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    699\u001b[0m                 \u001b[0;31m# TODO(https://github.com/pytorch/pytorch/issues/76750)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    700\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 701\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    702\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_yielded\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    703\u001b[0m             if (\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_next_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    755\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    756\u001b[0m         \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# may raise StopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 757\u001b[0;31m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dataset_fetcher\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfetch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# may raise StopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    758\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pin_memory\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    759\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpin_memory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpin_memory\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pin_memory_device\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/utils/data/_utils/fetch.py\u001b[0m in \u001b[0;36mfetch\u001b[0;34m(self, possibly_batched_index)\u001b[0m\n\u001b[1;32m     50\u001b[0m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getitems__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0midx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     53\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/utils/data/_utils/fetch.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     50\u001b[0m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getitems__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0midx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     53\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-23-9389e2955ae8>\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, idx)\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m         \u001b[0;31m# Load and transform the NAIP image\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 23\u001b[0;31m         \u001b[0mnaip_image\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnaip_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconvert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'RGB'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     24\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m             \u001b[0mnaip_image\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnaip_image\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/PIL/Image.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(fp, mode, formats)\u001b[0m\n\u001b[1;32m   3478\u001b[0m         \u001b[0mexclusive_fp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3479\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3480\u001b[0;31m     \u001b[0mprefix\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m16\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3481\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3482\u001b[0m     \u001b[0mpreinit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","model.to(device)\n","\n","num_epochs = 3\n","for epoch in range(num_epochs):\n","    train_loss, train_acc = train_one_epoch(model, train_loader, criterion, optimizer, device)\n","    val_loss, val_acc = validate(model, val_loader, criterion, device)\n","\n","    print(f\"Epoch {epoch + 1}/{num_epochs}\")\n","    print(f\"Train Loss: {train_loss:.4f}, Train Accuracy: {train_acc:.2f}%\")\n","    print(f\"Validation Loss: {val_loss:.4f}, Validation Accuracy: {val_acc:.2f}%\\n\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1351,"status":"ok","timestamp":1732427891847,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"},"user_tz":300},"id":"sgQM3JoMdfpH","outputId":"91cc587d-e667-46d8-f34e-10366334b02d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model saved to /content/drive/MyDrive/models/vit_model_no_mask.pth\n"]}],"source":["save_path = '/content/drive/MyDrive/models/vit_model_no_mask.pth'\n","\n","torch.save(model.state_dict(), save_path)\n","print(f\"Model saved to {save_path}\")"]},{"cell_type":"code","execution_count":29,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":551,"status":"ok","timestamp":1732505407150,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"},"user_tz":300},"id":"wCpNhBhAd-wn","outputId":"05877d2a-dfeb-42ce-8a86-64a878d174c3"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-29-f2b9a42de2bd>:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  model.load_state_dict(torch.load(load_path))\n"]},{"output_type":"stream","name":"stdout","text":["Model loaded from /content/drive/MyDrive/models/vit_model_no_mask.pth\n"]}],"source":["device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","model.to(device)\n","# Load the model from Google Drive\n","load_path = '/content/drive/MyDrive/models/vit_model_no_mask.pth'\n","model.load_state_dict(torch.load(load_path))\n","model.to(device)\n","print(f\"Model loaded from {load_path}\")"]},{"cell_type":"code","source":["!mkdir -p /content/drive/MyDrive/models"],"metadata":{"id":"SFQkIz4MqzZC"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":849301,"status":"ok","timestamp":1731703070306,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"},"user_tz":300},"id":"wyj0_zbhfWk5","outputId":"49add3db-ed81-400a-9253-8bed0b1c8579"},"outputs":[{"name":"stdout","output_type":"stream","text":["Test Loss: 0.6488, Test Accuracy: 79.53%\n"]}],"source":["# Testing the model\n","test_loss, test_acc = validate(model, test_loader, criterion, device)\n","print(f\"Test Loss: {test_loss:.4f}, Test Accuracy: {test_acc:.2f}%\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":61303,"status":"ok","timestamp":1732430083304,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"},"user_tz":300},"id":"8PU17pzef1y8","outputId":"870a6eaa-b64d-4fc3-eb0b-3bd725f23bb3"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 72   9   0   7   1]\n"," [  6 195   0  10   1]\n"," [  0   0   5  30   0]\n"," [  0  47   0 181   2]\n"," [  3  17   0  12  81]]\n","              precision    recall  f1-score   support\n","\n","          NG       0.89      0.81      0.85        89\n","         SUN       0.73      0.92      0.81       212\n","         WND       1.00      0.14      0.25        35\n","         BIT       0.75      0.79      0.77       230\n","         WAT       0.95      0.72      0.82       113\n","\n","    accuracy                           0.79       679\n","   macro avg       0.86      0.68      0.70       679\n","weighted avg       0.81      0.79      0.77       679\n","\n"]}],"source":["from sklearn.metrics import classification_report, confusion_matrix\n","\n","all_preds = []\n","all_labels = []\n","\n","model.eval()\n","with torch.no_grad():\n","    for images, labels in test_loader:\n","        images, labels = images.to(device), labels.to(device)\n","        outputs = model(images).logits\n","        _, preds = torch.max(outputs, 1)\n","        all_preds.extend(preds.cpu().numpy())\n","        all_labels.extend(labels.cpu().numpy())\n","\n","print(confusion_matrix(all_labels, all_preds))\n","print(classification_report(all_labels, all_preds, target_names=['NG', 'SUN', 'WND', 'BIT', 'WAT']))\n"]},{"cell_type":"markdown","metadata":{"id":"v-bHJI-yUmpf"},"source":["# VIT-B/16 Model with MASKS"]},{"cell_type":"code","source":["import os\n","from PIL import Image, UnidentifiedImageError\n","import numpy as np\n","from sklearn.model_selection import train_test_split, StratifiedKFold\n","\n","# Exclude invalid masks\n","def exclude_invalid_masks(image_groups):\n","    valid_image_groups = {}\n","    excluded_ids = []\n","\n","    for plant_id, data in image_groups.items():\n","        try:\n","            mask_path = data['Mask']\n","            if mask_path:\n","                # Attempt to open the mask to verify it's valid\n","                Image.open(mask_path)\n","            valid_image_groups[plant_id] = data\n","        except (UnidentifiedImageError, FileNotFoundError, ValueError):\n","            excluded_ids.append(plant_id)\n","\n","    return valid_image_groups, excluded_ids\n","\n","# Apply exclusion\n","filtered_image_groups, excluded_ids = exclude_invalid_masks(filtered_image_groups)\n","print(f\"Excluded {len(excluded_ids)} IDs with invalid masks.\")\n","\n","# Train-test split\n","ids = list(filtered_image_groups.keys())\n","types = [filtered_image_groups[plant_id]['Type'] for plant_id in ids]\n","\n","train_ids, test_ids = train_test_split(\n","    ids, test_size=0.3, stratify=types, random_state=42\n",")\n","\n","print(f\"Total IDs: {len(filtered_image_groups)}\")\n","print(f\"Train IDs: {len(train_ids)}\")\n","print(f\"Test IDs: {len(test_ids)}\")\n","\n","# Stratified K-Fold for cross-validation\n","def k_fold_split(train_ids, filtered_image_groups):\n","    train_types = [filtered_image_groups[plant_id]['Type'] for plant_id in train_ids]\n","    skf = StratifiedKFold(n_splits=4, shuffle=True, random_state=42)\n","\n","    folds = []\n","    for train_index, val_index in skf.split(train_ids, train_types):\n","        train_folds_ids = [train_ids[i] for i in train_index]\n","        val_folds_ids = [train_ids[i] for i in val_index]\n","        folds.append((train_folds_ids, val_folds_ids))\n","\n","    return folds\n","\n","folds = k_fold_split(train_ids, filtered_image_groups)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Wt91eiy2DNnD","executionInfo":{"status":"ok","timestamp":1732504936920,"user_tz":300,"elapsed":66740,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"}},"outputId":"f651eeb0-5874-494d-abf8-c7634504711f"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Excluded 1 IDs with invalid masks.\n","Total IDs: 2261\n","Train IDs: 1582\n","Test IDs: 679\n"]}]},{"cell_type":"code","source":["from torch.utils.data import Dataset, DataLoader\n","import torch\n","from torchvision import transforms\n","\n","# Dataset class\n","class PowerPlantDatasetWithMasks(Dataset):\n","    def __init__(self, image_groups, ids, transform, use_mask=True):\n","        self.image_groups = image_groups\n","        self.ids = ids\n","        self.transform = transform\n","        self.use_mask = use_mask\n","\n","    def __len__(self):\n","        return len(self.ids)\n","\n","    def __getitem__(self, idx):\n","        plant_id = self.ids[idx]\n","        naip_path = self.image_groups[plant_id]['NAIP']\n","        mask_path = self.image_groups[plant_id]['Mask'] if self.use_mask else None\n","        label = self.get_label(self.image_groups[plant_id]['Type'])\n","\n","        # Load and transform the NAIP image\n","        naip_image = Image.open(naip_path).convert('RGB')\n","        if self.transform:\n","            naip_image = self.transform(naip_image)\n","\n","        # Load mask if applicable\n","        if self.use_mask:\n","            mask_image = Image.open(mask_path)\n","            mask_tensor = torch.tensor(np.array(mask_image), dtype=torch.float32).unsqueeze(0)\n","            mask_tensor = torch.nn.functional.interpolate(\n","                mask_tensor.unsqueeze(0), size=(224, 224), mode='nearest'\n","            ).squeeze(0)\n","            return naip_image, mask_tensor, label\n","        else:\n","            return naip_image, label\n","\n","    def get_label(self, plant_type):\n","        type_to_label = {'WND': 0, 'SUN': 1, 'BIT': 2, 'NG': 3, 'WAT': 4}\n","        return type_to_label.get(plant_type, -1)\n"],"metadata":{"id":"S2cHB86fAvFB","executionInfo":{"status":"ok","timestamp":1732504936921,"user_tz":300,"elapsed":8,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","execution_count":24,"metadata":{"id":"HyCiDNhI-HRf","executionInfo":{"status":"ok","timestamp":1732504936922,"user_tz":300,"elapsed":7,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"}}},"outputs":[],"source":["# Transforms\n","transform = transforms.Compose([\n","    transforms.Resize((224, 224)),\n","    transforms.ToTensor()\n","])\n","\n","# Create datasets\n","train_dataset_with_masks = PowerPlantDatasetWithMasks(filtered_image_groups, train_ids, transform, use_mask=True)\n","test_dataset_with_masks = PowerPlantDatasetWithMasks(filtered_image_groups, test_ids, transform, use_mask=True)\n","\n","# Create loaders\n","train_loader_with_masks = DataLoader(train_dataset_with_masks, batch_size=32, shuffle=True)\n","test_loader_with_masks = DataLoader(test_dataset_with_masks, batch_size=32, shuffle=False)\n","\n","# Prepare fold DataLoaders for cross-validation\n","fold_data_loaders = []\n","for train_fold, val_fold in folds:\n","    train_dataset = PowerPlantDatasetWithMasks(filtered_image_groups, train_fold, transform, use_mask=True)\n","    val_dataset = PowerPlantDatasetWithMasks(filtered_image_groups, val_fold, transform, use_mask=True)\n","\n","    train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n","    val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)\n","\n","    fold_data_loaders.append((train_loader, val_loader))\n"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"exEP_Ct8IQ5l","executionInfo":{"status":"ok","timestamp":1732504936922,"user_tz":300,"elapsed":6,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"}}},"outputs":[],"source":["import torch.nn as nn\n","from transformers import ViTForImageClassification\n","\n","# Define the fusion model\n","class FusionModelWithMasks(nn.Module):\n","    def __init__(self, base_model):\n","        super(FusionModelWithMasks, self).__init__()\n","        self.base_model = base_model  # Pretrained no-mask ViT model\n","\n","        # Additional CNN for processing masks\n","        self.mask_cnn = nn.Sequential(\n","            nn.Conv2d(1, 16, kernel_size=3, stride=1, padding=1),\n","            nn.ReLU(),\n","            nn.MaxPool2d(kernel_size=2, stride=2),\n","            nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1),\n","            nn.ReLU(),\n","            nn.AdaptiveAvgPool2d((14, 14)),  # Match ViT patch size\n","        )\n","\n","        # Fully connected layer for combining features\n","        self.fusion_fc = nn.Linear(base_model.config.hidden_size + 32 * 14 * 14, base_model.config.hidden_size)\n","\n","    def forward(self, images, masks):\n","        # Get features from image using base ViT model\n","        image_features = self.base_model.vit(images).last_hidden_state[:, 0, :]  # CLS token features\n","\n","        # Process the binary mask\n","        mask_features = self.mask_cnn(masks)\n","        mask_features = mask_features.view(mask_features.size(0), -1)  # Flatten\n","\n","        # Concatenate image and mask features\n","        combined_features = torch.cat((image_features, mask_features), dim=1)\n","\n","        # Pass through fusion layer\n","        fused_features = self.fusion_fc(combined_features)\n","\n","        # Final classification\n","        logits = self.base_model.classifier(fused_features)\n","        return logits\n"]},{"cell_type":"code","source":["# Load pretrained no-mask model\n","no_mask_model_path = '/content/drive/MyDrive/models/vit_model_no_mask.pth'\n","model_without_masks = ViTForImageClassification.from_pretrained(\"google/vit-base-patch16-224-in21k\")\n","model_without_masks.classifier = nn.Linear(model_without_masks.config.hidden_size, 5)\n","model_without_masks.load_state_dict(torch.load(no_mask_model_path))\n","\n","# Initialize Fusion Model\n","fusion_model = FusionModelWithMasks(model_without_masks).to(device)\n","\n","# Loss and optimizer\n","criterion = nn.CrossEntropyLoss()\n","optimizer = torch.optim.AdamW(fusion_model.parameters(), lr=5e-5)\n","\n","# Training loop\n","num_epochs = 3"],"metadata":{"id":"XYzD-negnW5I","executionInfo":{"status":"error","timestamp":1732504944130,"user_tz":300,"elapsed":7214,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"}},"colab":{"base_uri":"https://localhost:8080/","height":307},"outputId":"957bfe04-5c53-48bf-b546-b6ea21602ce9"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stderr","text":["Some weights of ViTForImageClassification were not initialized from the model checkpoint at google/vit-base-patch16-224-in21k and are newly initialized: ['classifier.bias', 'classifier.weight']\n","You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","<ipython-input-26-8860eac5d1fc>:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  model_without_masks.load_state_dict(torch.load(no_mask_model_path))\n"]},{"output_type":"error","ename":"NameError","evalue":"name 'device' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-26-8860eac5d1fc>\u001b[0m in \u001b[0;36m<cell line: 8>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# Initialize Fusion Model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mfusion_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mFusionModelWithMasks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_without_masks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;31m# Loss and optimizer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'device' is not defined"]}]},{"cell_type":"code","source":["train_losses, val_losses = [], []\n","train_accuracies, val_accuracies = [], []\n","\n","for epoch in range(num_epochs):\n","    train_loss, train_acc = train_one_epoch(fusion_model, train_loader_with_masks, criterion, optimizer, device)\n","    val_loss, val_acc = validate(fusion_model, val_loader, criterion, device)\n","\n","    train_losses.append(train_loss)\n","    val_losses.append(val_loss)\n","    train_accuracies.append(train_acc)\n","    val_accuracies.append(val_acc)\n","\n","    print(f\"Epoch {epoch + 1}/{num_epochs}\")\n","    print(f\"Train Loss: {train_loss:.4f}, Train Accuracy: {train_acc:.2f}%\")\n","    print(f\"Validation Loss: {val_loss:.4f}, Validation Accuracy: {val_acc:.2f}%\\n\")\n"],"metadata":{"id":"5gvIFB7Z8LKg","executionInfo":{"status":"error","timestamp":1732479411075,"user_tz":300,"elapsed":503364,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"}},"colab":{"base_uri":"https://localhost:8080/","height":561},"outputId":"24f5286b-d267-4a47-baeb-9c27943ab18a"},"execution_count":63,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/3\n","Train Loss: 4.2083, Train Accuracy: 41.53%\n","Validation Loss: 1.4664, Validation Accuracy: 66.33%\n","\n","Epoch 2/3\n","Train Loss: 1.1909, Train Accuracy: 73.32%\n","Validation Loss: 0.7463, Validation Accuracy: 81.52%\n","\n","Epoch 3/3\n","Train Loss: 0.7498, Train Accuracy: 84.01%\n","Validation Loss: 0.2088, Validation Accuracy: 94.43%\n","\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-63-a54f7c29afdf>\u001b[0m in \u001b[0;36m<cell line: 18>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;31m# Test on the test set\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m \u001b[0mtest_loss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_acc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalidate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfusion_model\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_loader_with_masks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Test Loss: {test_loss:.4f}, Test Accuracy: {test_acc:.2f}%\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-54-2e1ca5a90be0>\u001b[0m in \u001b[0;36mvalidate\u001b[0;34m(model, val_loader, criterion, device)\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mno_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 36\u001b[0;31m         \u001b[0;32mfor\u001b[0m \u001b[0mimages\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmasks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mval_loader\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Unpack three values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     37\u001b[0m             \u001b[0mimages\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmasks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimages\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmasks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    699\u001b[0m                 \u001b[0;31m# TODO(https://github.com/pytorch/pytorch/issues/76750)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    700\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 701\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    702\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_yielded\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    703\u001b[0m             if (\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_next_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    755\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    756\u001b[0m         \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# may raise StopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 757\u001b[0;31m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dataset_fetcher\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfetch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# may raise StopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    758\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pin_memory\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    759\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpin_memory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpin_memory\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pin_memory_device\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/utils/data/_utils/fetch.py\u001b[0m in \u001b[0;36mfetch\u001b[0;34m(self, possibly_batched_index)\u001b[0m\n\u001b[1;32m     50\u001b[0m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getitems__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0midx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     53\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/utils/data/_utils/fetch.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     50\u001b[0m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getitems__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0midx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     53\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-58-9389e2955ae8>\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, idx)\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m         \u001b[0;31m# Load and transform the NAIP image\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 23\u001b[0;31m         \u001b[0mnaip_image\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnaip_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconvert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'RGB'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     24\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m             \u001b[0mnaip_image\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnaip_image\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/PIL/Image.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(fp, mode, formats)\u001b[0m\n\u001b[1;32m   3478\u001b[0m         \u001b[0mexclusive_fp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3479\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3480\u001b[0;31m     \u001b[0mprefix\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m16\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3481\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3482\u001b[0m     \u001b[0mpreinit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Plot Loss\n","plt.figure(figsize=(10, 5))\n","plt.plot(range(1, num_epochs + 1), train_losses, label=\"Train Loss\")\n","plt.plot(range(1, num_epochs + 1), val_losses, label=\"Validation Loss\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Loss\")\n","plt.title(\"Training and Validation Loss\")\n","plt.legend()\n","plt.show()\n","\n","# Plot Accuracy\n","plt.figure(figsize=(10, 5))\n","plt.plot(range(1, num_epochs + 1), train_accuracies, label=\"Train Accuracy\")\n","plt.plot(range(1, num_epochs + 1), val_accuracies, label=\"Validation Accuracy\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Accuracy\")\n","plt.title(\"Training and Validation Accuracy\")\n","plt.legend()\n","plt.show()\n"],"metadata":{"id":"JzkF1WY-8Ni7","executionInfo":{"status":"ok","timestamp":1732479415537,"user_tz":300,"elapsed":597,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"}},"colab":{"base_uri":"https://localhost:8080/","height":957},"outputId":"aca3b736-2dd1-49d7-9d96-fed72a37aaf7"},"execution_count":64,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA04AAAHWCAYAAABACtmGAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABwxUlEQVR4nO3dd3gU1f7H8c+mbUjZFCAFCaG3AKEICF4EBaSJRL2K/FBAQa8KItdyFQsCesV6LaBgR0WKIGCjCAiogIUqXREINaGmQgrZ+f2xZMkmm0qSTXm/nmce2dkzs2fHMfLN+cw5JsMwDAEAAAAA8uXm6g4AAAAAQEVH4QQAAAAAhaBwAgAAAIBCUDgBAAAAQCEonAAAAACgEBROAAAAAFAICicAAAAAKASFEwAAAAAUgsIJAAAAAApB4QQAFdCIESNUv379Eh07ceJEmUym0u1QBXPw4EGZTCbNnDmz3D/bZDJp4sSJ9tczZ86UyWTSwYMHCz22fv36GjFiRKn253LuFQBA0VE4AUAxmEymIm1r1qxxdVervbFjx8pkMmnfvn35tnnqqadkMpn0xx9/lGPPiu/YsWOaOHGitm7d6uqu2GUXr6+++qqruwIA5cLD1R0AgMrks88+c3j96aefasWKFXn2t2jR4rI+5/3335fVai3RsU8//bSeeOKJy/r8qmDo0KGaOnWqZs+erQkTJjhtM2fOHLVu3Vpt2rQp8efceeeduv3222U2m0t8jsIcO3ZMkyZNUv369dW2bVuH9y7nXgEAFB2FEwAUwx133OHw+pdfftGKFSvy7M/t3Llz8vHxKfLneHp6lqh/kuTh4SEPD368d+7cWY0bN9acOXOcFk4bNmzQgQMH9OKLL17W57i7u8vd3f2yznE5LudeAQAUHVE9AChlPXr0UKtWrbRp0yZdc8018vHx0ZNPPilJ+uqrrzRgwADVqVNHZrNZjRo10nPPPaesrCyHc+R+biVnLOq9995To0aNZDab1bFjR/3+++8Oxzp7xslkMmnMmDFavHixWrVqJbPZrKioKC1btixP/9esWaMrr7xS3t7eatSokd59990iPzf1008/6dZbb1W9evVkNpsVERGhf//73zp//nye7+fn56ejR48qJiZGfn5+ql27th599NE81yIhIUEjRoxQQECAAgMDNXz4cCUkJBTaF8k26rRnzx5t3rw5z3uzZ8+WyWTSkCFDlJGRoQkTJqhDhw4KCAiQr6+vunXrptWrVxf6Gc6ecTIMQ88//7zq1q0rHx8fXXvttdq5c2eeY8+cOaNHH31UrVu3lp+fnywWi/r166dt27bZ26xZs0YdO3aUJN111132OGj2813OnnFKTU3VI488ooiICJnNZjVr1kyvvvqqDMNwaFec+6KkTpw4oZEjRyo0NFTe3t6Kjo7WJ598kqfd3Llz1aFDB/n7+8tisah169Z688037e9nZmZq0qRJatKkiby9vVWzZk394x//0IoVK0qtrwBQEH4lCQBl4PTp0+rXr59uv/123XHHHQoNDZVk+0u2n5+fHn74Yfn5+emHH37QhAkTlJSUpFdeeaXQ886ePVvJycn617/+JZPJpJdfflk333yz9u/fX+jIw88//6yFCxfqgQcekL+/v9566y3dcsstOnTokGrWrClJ2rJli/r27avw8HBNmjRJWVlZmjx5smrXrl2k7z1//nydO3dO999/v2rWrKnffvtNU6dO1ZEjRzR//nyHtllZWerTp486d+6sV199VStXrtRrr72mRo0a6f7775dkK0AGDRqkn3/+Wffdd59atGihRYsWafjw4UXqz9ChQzVp0iTNnj1b7du3d/jsL774Qt26dVO9evV06tQpffDBBxoyZIjuueceJScn68MPP1SfPn3022+/5YnHFWbChAl6/vnn1b9/f/Xv31+bN2/W9ddfr4yMDId2+/fv1+LFi3XrrbeqQYMGio+P17vvvqvu3btr165dqlOnjlq0aKHJkydrwoQJuvfee9WtWzdJUteuXZ1+tmEYuvHGG7V69WqNHDlSbdu21fLly/XYY4/p6NGjev311x3aF+W+KKnz58+rR48e2rdvn8aMGaMGDRpo/vz5GjFihBISEvTQQw9JklasWKEhQ4aoZ8+eeumllyRJu3fv1rp16+xtJk6cqClTpmjUqFHq1KmTkpKStHHjRm3evFm9e/e+rH4CQJEYAIASGz16tJH7R2n37t0NScaMGTPytD937lyeff/6178MHx8fIy0tzb5v+PDhRmRkpP31gQMHDElGzZo1jTNnztj3f/XVV4Yk45tvvrHve/bZZ/P0SZLh5eVl7Nu3z75v27ZthiRj6tSp9n0DBw40fHx8jKNHj9r3/fXXX4aHh0eeczrj7PtNmTLFMJlMRmxsrMP3k2RMnjzZoW27du2MDh062F8vXrzYkGS8/PLL9n0XLlwwunXrZkgyPv7440L71LFjR6Nu3bpGVlaWfd+yZcsMSca7775rP2d6errDcWfPnjVCQ0ONu+++22G/JOPZZ5+1v/74448NScaBAwcMwzCMEydOGF5eXsaAAQMMq9Vqb/fkk08akozhw4fb96WlpTn0yzBs/67NZrPDtfn999/z/b6575Xsa/b88887tPvnP/9pmEwmh3ugqPeFM9n35CuvvJJvmzfeeMOQZMyaNcu+LyMjw+jSpYvh5+dnJCUlGYZhGA899JBhsViMCxcu5Huu6OhoY8CAAQX2CQDKElE9ACgDZrNZd911V579NWrUsP85OTlZp06dUrdu3XTu3Dnt2bOn0PMOHjxYQUFB9tfZow/79+8v9NhevXqpUaNG9tdt2rSRxWKxH5uVlaWVK1cqJiZGderUsbdr3Lix+vXrV+j5Jcfvl5qaqlOnTqlr164yDENbtmzJ0/6+++5zeN2tWzeH77JkyRJ5eHjYR6Ak2zNFDz74YJH6I9meSzty5Ih+/PFH+77Zs2fLy8tLt956q/2cXl5ekiSr1aozZ87owoULuvLKK53G/AqycuVKZWRk6MEHH3SIN44bNy5PW7PZLDc32/+Ks7KydPr0afn5+alZs2bF/txsS5Yskbu7u8aOHeuw/5FHHpFhGFq6dKnD/sLui8uxZMkShYWFaciQIfZ9np6eGjt2rFJSUrR27VpJUmBgoFJTUwuM3QUGBmrnzp3666+/LrtfAFASFE4AUAauuOIK+1/Ec9q5c6duuukmBQQEyGKxqHbt2vaJJRITEws9b7169RxeZxdRZ8+eLfax2cdnH3vixAmdP39ejRs3ztPO2T5nDh06pBEjRig4ONj+3FL37t0l5f1+3t7eeSKAOfsjSbGxsQoPD5efn59Du2bNmhWpP5J0++23y93dXbNnz5YkpaWladGiRerXr59DEfrJJ5+oTZs29udnateure+++65I/15yio2NlSQ1adLEYX/t2rUdPk+yFWmvv/66mjRpIrPZrFq1aql27dr6448/iv25OT+/Tp068vf3d9ifPdNjdv+yFXZfXI7Y2Fg1adLEXhzm15cHHnhATZs2Vb9+/VS3bl3dfffdeZ6zmjx5shISEtS0aVO1bt1ajz32WIWfRh5A1ULhBABlIOfIS7aEhAR1795d27Zt0+TJk/XNN99oxYoV9mc6ijKldH6ztxm5Hvov7WOLIisrS71799Z3332nxx9/XIsXL9aKFSvskxjk/n7lNRNdSEiIevfurS+//FKZmZn65ptvlJycrKFDh9rbzJo1SyNGjFCjRo304YcfatmyZVqxYoWuu+66Mp3q+4UXXtDDDz+sa665RrNmzdLy5cu1YsUKRUVFldsU42V9XxRFSEiItm7dqq+//tr+fFa/fv0cnmW75ppr9Pfff+ujjz5Sq1at9MEHH6h9+/b64IMPyq2fAKo3JocAgHKyZs0anT59WgsXLtQ111xj33/gwAEX9uqSkJAQeXt7O10wtqBFZLNt375df/75pz755BMNGzbMvv9yZj2LjIzUqlWrlJKS4jDqtHfv3mKdZ+jQoVq2bJmWLl2q2bNny2KxaODAgfb3FyxYoIYNG2rhwoUO8bpnn322RH2WpL/++ksNGza07z958mSeUZwFCxbo2muv1YcffuiwPyEhQbVq1bK/LsqMhjk/f+XKlUpOTnYYdcqOgmb3rzxERkbqjz/+kNVqdRh1ctYXLy8vDRw4UAMHDpTVatUDDzygd999V88884x9xDM4OFh33XWX7rrrLqWkpOiaa67RxIkTNWrUqHL7TgCqL0acAKCcZP9mP+dv8jMyMvTOO++4qksO3N3d1atXLy1evFjHjh2z79+3b1+e52LyO15y/H6GYThMKV1c/fv314ULFzR9+nT7vqysLE2dOrVY54mJiZGPj4/eeecdLV26VDfffLO8vb0L7Puvv/6qDRs2FLvPvXr1kqenp6ZOnepwvjfeeCNPW3d39zwjO/Pnz9fRo0cd9vn6+kpSkaZh79+/v7KysjRt2jSH/a+//rpMJlORn1crDf3791dcXJzmzZtn33fhwgVNnTpVfn5+9hjn6dOnHY5zc3OzL0qcnp7utI2fn58aN25sfx8AyhojTgBQTrp27aqgoCANHz5cY8eOlclk0meffVaukajCTJw4Ud9//72uvvpq3X///fa/gLdq1Upbt24t8NjmzZurUaNGevTRR3X06FFZLBZ9+eWXl/WszMCBA3X11VfriSee0MGDB9WyZUstXLiw2M//+Pn5KSYmxv6cU86YniTdcMMNWrhwoW666SYNGDBABw4c0IwZM9SyZUulpKQU67Oy16OaMmWKbrjhBvXv319btmzR0qVLHUaRsj938uTJuuuuu9S1a1dt375dn3/+ucNIlSQ1atRIgYGBmjFjhvz9/eXr66vOnTurQYMGeT5/4MCBuvbaa/XUU0/p4MGDio6O1vfff6+vvvpK48aNc5gIojSsWrVKaWlpefbHxMTo3nvv1bvvvqsRI0Zo06ZNql+/vhYsWKB169bpjTfesI+IjRo1SmfOnNF1112nunXrKjY2VlOnTlXbtm3tz0O1bNlSPXr0UIcOHRQcHKyNGzdqwYIFGjNmTKl+HwDID4UTAJSTmjVr6ttvv9Ujjzyip59+WkFBQbrjjjvUs2dP9enTx9XdkyR16NBBS5cu1aOPPqpnnnlGERERmjx5snbv3l3orH+enp765ptvNHbsWE2ZMkXe3t666aabNGbMGEVHR5eoP25ubvr66681btw4zZo1SyaTSTfeeKNee+01tWvXrljnGjp0qGbPnq3w8HBdd911Du+NGDFCcXFxevfdd7V8+XK1bNlSs2bN0vz587VmzZpi9/v555+Xt7e3ZsyYodWrV6tz5876/vvvNWDAAId2Tz75pFJTUzV79mzNmzdP7du313fffacnnnjCoZ2np6c++eQTjR8/Xvfdd58uXLigjz/+2GnhlH3NJkyYoHnz5unjjz9W/fr19corr+iRRx4p9ncpzLJly5wumFu/fn21atVKa9as0RNPPKFPPvlESUlJatasmT7++GONGDHC3vaOO+7Qe++9p3feeUcJCQkKCwvT4MGDNXHiRHvEb+zYsfr666/1/fffKz09XZGRkXr++ef12GOPlfp3AgBnTEZF+lUnAKBCiomJYSpoAEC1xjNOAAAH58+fd3j9119/acmSJerRo4drOgQAQAXAiBMAwEF4eLhGjBihhg0bKjY2VtOnT1d6erq2bNmSZ20iAACqC55xAgA46Nu3r+bMmaO4uDiZzWZ16dJFL7zwAkUTAKBaY8QJAAAAAArBM04AAAAAUAgKJwAAAAAoRLV7xslqterYsWPy9/eXyWRydXcAAAAAuIhhGEpOTladOnXs68blp9oVTseOHVNERISruwEAAACggjh8+LDq1q1bYJtqVzj5+/tLsl0ci8Xi4t4AAAAAcJWkpCRFRETYa4SCVLvCKTueZ7FYKJwAAAAAFOkRHiaHAAAAAIBCUDgBAAAAQCEonAAAAACgENXuGScAAABU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4ScAAAAoL5nnpBfquOaznzwmefkW2szDw0PDhg3TzJkz9dRTT8lkMkmyzf6clZWlIUOGKCUlRR06dNDjjz8ui8Wi7777TnfeeacaNWqkTp06FfoZVqtVN998s0JDQ/Xrr78qMTHR6ezT/v7+mjlzpurUqaPt27frnnvukb+/v/7zn/9o8ODB2rFjh5YtW6aVK1dKkgICAvKcIzU1VX369FGXLl30+++/68SJExo1apTGjBnjUByuXr1a4eHhWr16tfbt26fBgwerbdu2uueeewr9Ps6+X3bRtHbtWl24cEGjR4/W4MGDtWbNGknS0KFD1a5dO02fPl3u7u7aunWrPD09Jdke98nIyNCPP/4oX19f7dq1S35+fsXuR3G4rHDq2bOntm/f7rDvrrvuUvPmzfX444/nKZokqUuXLlq1apXDTbNixQp16dKlrLtb6WVH995a9Zemrt6nOb8d0pZDZ/XO0PZqWLtsbzIAAICq5u6779Yrr7yitWvXqkePHpJsMb1bbrnF/mz9o48+am//4IMPavny5friiy+KVDitXLlSe/bs0fLly1Wnjq2QfOGFF/I8l/T000/b/1y/fn09+uijmjt3rv7zn/+oRo0a8vPzk4eHR4EDDbNnz1ZaWpo+/fRT+fraCsdp06Zp4MCBeumll+yPygQFBWnatGlyd3dX8+bNNWDAAK1atapEhdOqVau0fft2HThwwD4HwaeffqqoqCj9/vvv6tixow4dOqTHHntMzZs3lyQ1adLEfvyhQ4d0yy23qHXr1pKkhg0bFrsPxeWywsnf31+tWrVy2Ofr66uaNWva9w8bNkxXXHGF/Rmohx56SN27d9drr72mAQMGaO7cudq4caPee++9cu9/ZZQd3evYIFjj5m7VnrhkDZz6s164ubUGtb3C1d0DAACQPH1sIz+u+uwiat68ubp27aqPPvpIPXr00L59+/TTTz9p8uTJkmxJqhdeeEFffPGFjh49qoyMDKWnpxf5Gabdu3crIiLCXjRJcjpYMG/ePL311lv6+++/lZKSogsXLhT70ZTdu3crOjraXjRJ0tVXXy2r1aq9e/faC6eoqCiHwY3w8PA8AyHF+cyIiAiHidtatmypwMBA7d69Wx07dtTDDz+sUaNG6bPPPlOvXr106623qlGjRpKksWPH6v7779f333+vXr166ZZbbinRc2XF4fJZ9Qpy6NAhHT9+3P66a9eumj17tt577z1FR0drwYIFWrx4cZ4CDAXLju5d1fDSrHvjFzLrHgAAqABMJltczhXbxchdUY0cOVJffvmlkpOT9fHHH6tRo0bq3r27JOmVV17Rm2++qccff1yrV6/W1q1b1adPH2VkZJTapdqwYYOGDh2q/v3769tvv9WWLVv01FNPlepn5JQdk8tmMplktVrL5LMk24yAO3fu1IABA/TDDz+oZcuWWrRokSRp1KhR2r9/v+68805t375dV155paZOnVpmfZEqWOG0Zs0ahwfi1qxZk+ehu1tvvVV79+5Venq6duzYof79+5dvJ6sIW3TvKo3t2UQmkzTnt0OKeXud/mbWPQAAgCK57bbb5ObmptmzZ+vTTz/V3XffbX/ead26dRo0aJDuuOMORUdHq2HDhvrzzz+LfO4WLVro8OHDDoMIv/zyi0Ob9evXKzIyUk899ZSuvPJKNWnSRLGxsQ5tvLy8lJVV8C/HW7RooW3btik1NdW+b926dXJzc1OzZs2K3OfiyP5+OWe83rVrlxISEtSyZUv7vqZNm+rf//63vv/+e9188836+OOP7e9FRETovvvu08KFC/XII4/o/fffL5O+ZqtQhRPKl7ubSQ/3bqrP7u6sWn5e2hOXrBuZdQ8AAKBI/Pz8NHjwYI0fP17Hjx/XiBEj7O81adJEK1as0Pr167V7927961//yjPJWUF69eqlpk2bavjw4dq2bZt++uknPfXUUw5tmjRpokOHDmnu3Ln6+++/9dZbb9lHZLLVr19fBw4c0NatW3Xq1Cmlp6fn+ayhQ4fK29tbw4cP144dO7R69Wo9+OCDuvPOO/MsBVRcWVlZ2rp1q8O2e/du9erVS61bt9bQoUO1efNm/fbbbxo2bJi6d++uK6+8UufPn9eYMWO0Zs0axcbGat26dfr999/VokULSdK4ceO0fPlyHThwQJs3b9bq1avt75UVCifoH01qaclYonsAAADFNXLkSJ09e1Z9+vRxeB7p6aefVvv27dWnTx/16NFDYWFhiomJKfJ53dzctGjRIp0/f16dOnXSqFGj9N///tehzY033qh///vfGjNmjNq2bav169frmWeecWhzyy23qG/fvrr22mtVu3Ztp1Oi+/j4aPny5Tpz5ow6duyof/7zn+rZs6emTZtWvIvhREpKitq1a+ewDRw4UCaTSV999ZWCgoJ0zTXXqFevXmrYsKHmzZsnSXJ3d9fp06c1bNgwNW3aVLfddpv69eunSZMmSbIVZKNHj1aLFi3Ut29fNW3aVO+8885l97cgJsMo4oT1VURSUpICAgKUmJhYrdZ0Koosq6E3V/2lqT/8JcOQmof56+2h7dWIWfcAAEAZSUtL04EDB9SgQYMyXdsT1VdB91hxagNGnGBHdA8AAABwjsIJeTiP7v1BdA8AAADVFoUTnArJM+veYWbdAwAAQLVF4YR8OYvuDZz6sxZvIboHAACA6oXCCYXKju51aVhT5zKyNG4e0T0AAFC6qtl8ZShHpXVvUTihSEIs3po1qrMeyhXd23eC6B4AACg5T09PSdK5c+dc3BNUVRkZGZJsU5xfDo/S6AyqB3c3k/7du6k6NQjWQ3O32mbdm/azXriptWLaXeHq7gEAgErI3d1dgYGBOnHihCTbmkImk8nFvUJVYbVadfLkSfn4+MjD4/JKH9ZxQomcSE7TQ3O2asP+05Kk2ztGaOKNUfL2vLxKHgAAVD+GYSguLk4JCQmu7gqqIDc3NzVo0EBeXl553itObUDhhBLLshp6a9VfeivHgrnT/q+9GoewYC4AACi+rKwsZWZmurobqGK8vLzk5ub8CSUKpwJQOJW+dftO6aG5W3UqJV0+Xu5E9wAAAFApFKc2YHIIXLarG9fSkof+oa6NLs2698SXzLoHAACAqoPCCaUixN9bn43srHG9bLPuzf2dWfcAAABQdVA4odS4u5k0rldTzRrZWbX8zPZZ91gwFwAAAJUdhRNKnbPo3uML/tD5DKJ7AAAAqJwonFAmckf35m0kugcAAIDKi8IJZSY7uvf5xeje3nhbdG/RliOu7hoAAABQLBROKHNdc0X3/j1vG9E9AAAAVCoUTigX2dG9f/dqSnQPAAAAlQ6FE8qNu5tJD/VqQnQPAAAAlQ6FE8pddnTv6sZE9wAAAFA5UDjBJUL8vfXp3c6ie8mu7hoAAACQB4UTXMZZdG/g1HVauJnoHgAAACoWCie4XM7o3vnMLD38xTb9Z8E2onsAAACoMCicUCHkju59sfGIBr39M9E9AAAAVAgUTqgw7NG9UZ1V29+sP+NTNHDqOn25iegeAAAAXIvCCRVO10a1tGRsN3t075H5RPcAAADgWhROqJBq+5v16d2d9XDvpnLLEd37K57oHgAAAMofhRMqLHc3k8b2bKJZOaJ7N04jugcAAIDyR+GECi87uvePxrXs0b3H5hPdAwAAQPlxaeE0ffp0tWnTRhaLRRaLRV26dNHSpUvzbT9z5kyZTCaHzdvbuxx7DFep7W/WJ3d3skf35m8iugcAAIDy49LCqW7dunrxxRe1adMmbdy4Udddd50GDRqknTt35nuMxWLR8ePH7VtsbGw59hiuRHQPAAAAruLSwmngwIHq37+/mjRpoqZNm+q///2v/Pz89Msvv+R7jMlkUlhYmH0LDQ0txx6jIiC6BwAAgPJWYZ5xysrK0ty5c5WamqouXbrk2y4lJUWRkZGKiIgodHRKktLT05WUlOSwofLLju49QnQPAAAA5cDlhdP27dvl5+cns9ms++67T4sWLVLLli2dtm3WrJk++ugjffXVV5o1a5asVqu6du2qI0fyj2pNmTJFAQEB9i0iIqKsvgrKmbubSQ/2bKLPR11FdA8AAABlymQYhuHKDmRkZOjQoUNKTEzUggUL9MEHH2jt2rX5Fk85ZWZmqkWLFhoyZIiee+45p23S09OVnp5uf52UlKSIiAglJibKYrGU2veAa51MTte/523Vz/tOSZL+2aGuJg+Kko+Xh4t7BgAAgIoqKSlJAQEBRaoNXF445darVy81atRI7777bpHa33rrrfLw8NCcOXOK1L44FweVS5bV0Dur9+n1lX/KakhNQvz0ztD2ahLq7+quAQAAoAIqTm3g8qheblar1WGEqCBZWVnavn27wsPDy7hXqAxyR/f+OmGL7i0gugcAAIDL5NLCafz48frxxx918OBBbd++XePHj9eaNWs0dOhQSdKwYcM0fvx4e/vJkyfr+++/1/79+7V582bdcccdio2N1ahRo1z1FVABdWlUU0vGdlO3JrZZ9x6dv02Pzt+mcxkXXN01AAAAVFIufQDkxIkTGjZsmI4fP66AgAC1adNGy5cvV+/evSVJhw4dkpvbpdru7NmzuueeexQXF6egoCB16NBB69evL9LzUKheavub9cldnfTOmn3634o/tWDTEW07nEB0DwAAACVS4Z5xKms841T9/LL/tMbO2aITyemq4emuyYOidOuVzK4IAABQ3VXqZ5yA0nZVw5pa8tCl6N5jC/7QI18Q3QMAAEDRUTihWqjlZ4vuPXq9bcHcLzcf0aBp6/QnC+YCAACgCCic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WJHPt3btWo0ePVq//PKLVqxYoczMTF1//fVKTU3N95j169dryJAhGjlypLZs2aKYmBjFxMRox44dxfkqAFCuTCaT7rwY3YusSXQPAIDKplRn1btcJ0+eVEhIiNauXatrrrnGaZvBgwcrNTVV3377rX3fVVddpbZt22rGjBl52qenpys9Pd3+OikpSREREcyqB8BlktIyNf7L7fpu+3FJUq8WoXr11jYK9PFycc8AAKheKu2seomJiZKk4ODgfNts2LBBvXr1ctjXp08fbdiwwWn7KVOmOIyKRURElF6HAaAEsqN7z12cdS87ureZWfcAAKiwKkzhZLVaNW7cOF199dVq1apVvu3i4uIUGhrqsC80NFRxcXFO248fP16JiYn27fDhw6XabwAoCWfRvduI7gEAUGFVmMJp9OjR2rFjh+bOnVuq5zWbzbJYLA4bAFQUra4I0DcPMuseAAAVXYUonMaMGaNvv/1Wq1evVt26dQtsGxYWpvj4eId98fHxCgsLK8suAkCZsUf3YloR3QMAoIJyaeFkGIbGjBmjRYsW6YcfflCDBg0KPaZLly5atWqVw74VK1aoS5cuZdVNAChzJpNJd14VSXQPAIAKyqWF0+jRozVr1izNnj1b/v7+iouLU1xcnM6fP29vM2zYMI0fP97++qGHHtKyZcv02muvac+ePZo4caI2btyoMWPGuOIrAECpanVFgL7NE93bSHQPAAAXc2nhNH36dCUmJqpHjx4KDw+3b/PmzbO3OXTokI4fP25/3bVrV82ePVvvvfeeoqOjtWDBAi1evLjACSUAoDLxzxPdO0F0DwAAF6tQ6ziVh+LM1Q4ArrbjaKJGz96s2NPn5OFm0uN9m2tUtwYymUyu7hoAAJVepV3HCQDgyB7da2OL7v13CdE9AABcgcIJACo4f29PTRvSTs/HtJKXB9E9AABcgcIJACoBk8mkO66K1ML7u6p+jln33v+RWfcAACgPFE4AUIlkL5h7A9E9AADKFYUTAFQy/t6emuokurcplugeAABlhcIJACohZ9G9we9u0Hs//i2rlegeAACljcIJACqx3NG9F5bs0T2fbtTZVKJ7AACUJgonAKjkckf3Vu05oQFv/UR0DwCAUkThBABVQHZ0b9EDtujescQ0onsAAJQiCicAqEKi6hDdAwCgLFA4AUAVkx3d++9NRPcAACgtFE4A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\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.metrics import classification_report, confusion_matrix\n","import numpy as np\n","\n","def evaluate_on_test(model, test_loader, device):\n","    model.eval()\n","    all_preds, all_labels = [], []\n","\n","    with torch.no_grad():\n","        for images, masks, labels in test_loader:\n","            images, masks, labels = images.to(device), masks.to(device), labels.to(device)\n","            outputs = model(images, masks)  # Forward pass\n","            _, preds = torch.max(outputs, 1)\n","            all_preds.extend(preds.cpu().numpy())\n","            all_labels.extend(labels.cpu().numpy())\n","\n","    # Classification Report\n","    print(\"\\nClassification Report:\")\n","    print(classification_report(all_labels, all_preds, target_names=['WND', 'SUN', 'BIT', 'NG', 'WAT']))\n","\n","    # Confusion Matrix\n","    print(\"\\nConfusion Matrix:\")\n","    print(confusion_matrix(all_labels, all_preds))\n"],"metadata":{"id":"S3AxwgqtcaJl","executionInfo":{"status":"ok","timestamp":1732479422130,"user_tz":300,"elapsed":6,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"}}},"execution_count":65,"outputs":[]},{"cell_type":"code","source":["evaluate_on_test(fusion_model, test_loader_with_masks, device)"],"metadata":{"id":"cl0NoQLUccfd","executionInfo":{"status":"ok","timestamp":1732479688477,"user_tz":300,"elapsed":261748,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"444aa172-6e91-47bf-d144-a55417be7c44"},"execution_count":66,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","         WND       0.85      0.75      0.80        89\n","         SUN       0.75      0.86      0.80       212\n","         BIT       0.38      0.40      0.39        35\n","          NG       0.81      0.69      0.75       230\n","         WAT       0.75      0.81      0.78       113\n","\n","    accuracy                           0.76       679\n","   macro avg       0.71      0.70      0.70       679\n","weighted avg       0.76      0.76      0.76       679\n","\n","\n","Confusion Matrix:\n","[[ 67   6   1   7   8]\n"," [  7 183   5   8   9]\n"," [  2   1  14  13   5]\n"," [  2  47  14 159   8]\n"," [  1   8   3   9  92]]\n"]}]},{"cell_type":"code","source":["save_path = '/content/drive/MyDrive/models/vit_model_with_mask.pth'\n","\n","torch.save(model.state_dict(), save_path)\n","print(f\"Model saved to {save_path}\")"],"metadata":{"id":"i3_tgslRlJAA","executionInfo":{"status":"ok","timestamp":1732479769991,"user_tz":300,"elapsed":947,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"918c6c8f-4b3e-4639-eaeb-b59ae0b8a9ea"},"execution_count":68,"outputs":[{"output_type":"stream","name":"stdout","text":["Model saved to /content/drive/MyDrive/models/vit_model_with_mask.pth\n"]}]},{"cell_type":"markdown","source":["## Retrain a new model with k-fold validation"],"metadata":{"id":"e-ZqMoyv5zsL"}},{"cell_type":"code","execution_count":38,"metadata":{"id":"QjjrMh62Phks","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732508541824,"user_tz":300,"elapsed":5060,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"}},"outputId":"d7795711-c45d-4ade-f359-ee4b7e07438f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Excluded 0 IDs with invalid masks.\n","Excluded IDs: []\n"]}],"source":["import os\n","from PIL import Image, UnidentifiedImageError\n","import torch\n","from torch.utils.data import Dataset, DataLoader\n","import numpy as np\n","\n","# Exclude invalid masks\n","def exclude_invalid_masks(image_groups):\n","    valid_image_groups = {}\n","    excluded_ids = []\n","\n","    for plant_id, data in image_groups.items():\n","        try:\n","            mask_path = data['Mask']\n","            if mask_path:\n","                Image.open(mask_path)  # Verify the mask is valid\n","            valid_image_groups[plant_id] = data\n","        except (UnidentifiedImageError, FileNotFoundError, ValueError):\n","            excluded_ids.append(plant_id)\n","\n","    return valid_image_groups, excluded_ids\n"]},{"cell_type":"markdown","source":[],"metadata":{"id":"qK5tgaJ57twV"}},{"cell_type":"code","source":["# Dataset class\n","class PowerPlantDatasetWithMasks(Dataset):\n","    def __init__(self, image_groups, ids, transform, use_mask=True):\n","        self.image_groups = image_groups\n","        self.ids = ids\n","        self.transform = transform\n","        self.use_mask = use_mask\n","\n","    def __len__(self):\n","        return len(self.ids)\n","\n","    def __getitem__(self, idx):\n","        plant_id = self.ids[idx]\n","        naip_path = self.image_groups[plant_id]['NAIP']\n","        mask_path = self.image_groups[plant_id]['Mask'] if self.use_mask else None\n","        label = self.get_label(self.image_groups[plant_id]['Type'])\n","\n","        # Load and transform the NAIP image\n","        naip_image = Image.open(naip_path).convert('RGB')\n","        if self.transform:\n","            naip_image = self.transform(naip_image)\n","\n","        # Load mask if applicable\n","        if self.use_mask:\n","            mask_image = Image.open(mask_path)\n","            mask_tensor = torch.tensor(np.array(mask_image), dtype=torch.float32).unsqueeze(0)\n","            mask_tensor = torch.nn.functional.interpolate(mask_tensor.unsqueeze(0), size=(224, 224), mode='nearest').squeeze(0)\n","            return naip_image, mask_tensor, label\n","        else:\n","            return naip_image, label\n","\n","    def get_label(self, plant_type):\n","        type_to_label = {'WND': 0, 'SUN': 1, 'BIT': 2, 'NG': 3, 'WAT': 4}\n","        return type_to_label.get(plant_type, -1)"],"metadata":{"id":"kg8lnUS2vxEU","executionInfo":{"status":"ok","timestamp":1732511804873,"user_tz":300,"elapsed":186,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"}}},"execution_count":45,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split, StratifiedKFold\n","\n","# Exclude invalid masks\n","filtered_image_groups, excluded_ids = exclude_invalid_masks(filtered_image_groups)\n","\n","print(f\"Excluded {len(excluded_ids)} IDs with invalid masks.\")\n","\n","# Train-test split\n","ids = list(filtered_image_groups.keys())\n","types = [filtered_image_groups[plant_id]['Type'] for plant_id in ids]\n","\n","train_ids, test_ids = train_test_split(\n","    ids, test_size=0.3, stratify=types, random_state=42\n",")\n","\n","print(f\"Train IDs: {len(train_ids)}, Test IDs: {len(test_ids)}\")\n","\n","# K-fold cross-validation setup\n","def k_fold_split(train_ids, filtered_image_groups):\n","    train_types = [filtered_image_groups[plant_id]['Type'] for plant_id in train_ids]\n","    skf = StratifiedKFold(n_splits=4, shuffle=True, random_state=42)\n","\n","    folds = []\n","    for train_index, val_index in skf.split(train_ids, train_types):\n","        train_folds_ids = [train_ids[i] for i in train_index]\n","        val_folds_ids = [train_ids[i] for i in val_index]\n","        folds.append((train_folds_ids, val_folds_ids))\n","\n","    return folds\n","\n","folds = k_fold_split(train_ids, filtered_image_groups)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hR5hO46Cv0ne","executionInfo":{"status":"ok","timestamp":1732511814011,"user_tz":300,"elapsed":4989,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"}},"outputId":"d2695bd3-2fb4-44e5-ebf6-cd23306388e5"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["Excluded 0 IDs with invalid masks.\n","Train IDs: 1582, Test IDs: 679\n"]}]},{"cell_type":"code","source":["import torch.nn as nn\n","\n","class FusionModelWithMasks(nn.Module):\n","    def __init__(self, base_model):\n","        super(FusionModelWithMasks, self).__init__()\n","        self.base_model = base_model  # Pretrained ViT model without masks\n","\n","        # CNN for masks\n","        self.mask_cnn = nn.Sequential(\n","            nn.Conv2d(1, 16, kernel_size=3, stride=1, padding=1),\n","            nn.ReLU(),\n","            nn.MaxPool2d(kernel_size=2, stride=2),\n","            nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1),\n","            nn.ReLU(),\n","            nn.AdaptiveAvgPool2d((14, 14)),  # Match ViT patch size\n","        )\n","\n","        # Fusion layer\n","        self.fusion_fc = nn.Linear(base_model.config.hidden_size + 32 * 14 * 14, base_model.config.hidden_size)\n","\n","    def forward(self, images, masks):\n","        image_features = self.base_model.vit(images).last_hidden_state[:, 0, :]  # CLS token\n","        mask_features = self.mask_cnn(masks).view(masks.size(0), -1)  # Flatten\n","        combined_features = torch.cat((image_features, mask_features), dim=1)\n","        fused_features = self.fusion_fc(combined_features)\n","        logits = self.base_model.classifier(fused_features)\n","        return logits\n"],"metadata":{"id":"iX47nLrOv6VU","executionInfo":{"status":"ok","timestamp":1732511814012,"user_tz":300,"elapsed":4,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"}}},"execution_count":47,"outputs":[]},{"cell_type":"code","source":["def train_one_epoch(model, train_loader, criterion, optimizer, device):\n","    model.train()\n","    running_loss = 0.0\n","    correct = 0\n","    total = 0\n","\n","    for images, masks, labels in train_loader:\n","        images, masks, labels = images.to(device), masks.to(device), labels.to(device)\n","        optimizer.zero_grad()\n","        outputs = model(images, masks)\n","        loss = criterion(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        _, predicted = torch.max(outputs.data, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","        running_loss += loss.item()\n","\n","    epoch_loss = running_loss / len(train_loader)\n","    epoch_acc = 100 * correct / total\n","    return epoch_loss, epoch_acc\n","\n","def validate(model, val_loader, criterion, device):\n","    model.eval()\n","    running_loss = 0.0\n","    correct = 0\n","    total = 0\n","\n","    with torch.no_grad():\n","        for images, masks, labels in val_loader:\n","            images, masks, labels = images.to(device), masks.to(device), labels.to(device)\n","            outputs = model(images, masks)\n","            loss = criterion(outputs, labels)\n","            running_loss += loss.item()\n","\n","            _, predicted = torch.max(outputs.data, 1)\n","            total += labels.size(0)\n","            correct += (predicted == labels).sum().item()\n","\n","    val_loss = running_loss / len(val_loader)\n","    val_acc = 100 * correct / total\n","    return val_loss, val_acc\n"],"metadata":{"id":"GI_f__qisw53","executionInfo":{"status":"ok","timestamp":1732511814012,"user_tz":300,"elapsed":3,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["# Initialize Fusion Model\n","no_mask_model_path = '/content/drive/MyDrive/models/vit_model_no_mask.pth'\n","base_model = ViTForImageClassification.from_pretrained(\"google/vit-base-patch16-224-in21k\")\n","base_model.classifier = nn.Linear(base_model.config.hidden_size, 5)\n","base_model.load_state_dict(torch.load(no_mask_model_path))\n","\n","fusion_model = FusionModelWithMasks(base_model).to(device)\n","\n","# Loss and optimizer\n","criterion = nn.CrossEntropyLoss()\n","optimizer = torch.optim.AdamW(fusion_model.parameters(), lr=5e-5)\n","\n","# Training loop\n","num_epochs = 3\n","\n","for epoch in range(num_epochs):\n","    print(f\"Epoch {epoch + 1}/{num_epochs}\")\n","    for fold, (train_fold, val_fold) in enumerate(folds):\n","        train_dataset = PowerPlantDatasetWithMasks(filtered_image_groups, train_fold, transform, use_mask=True)\n","        val_dataset = PowerPlantDatasetWithMasks(filtered_image_groups, val_fold, transform, use_mask=True)\n","\n","        train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n","        val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)\n","\n","        train_loss, train_acc = train_one_epoch(fusion_model, train_loader, criterion, optimizer, device)\n","        val_loss, val_acc = validate(fusion_model, val_loader, criterion, device)\n","\n","        print(f\"  Fold {fold + 1} - Train Loss: {train_loss:.4f}, Train Accuracy: {train_acc:.2f}%\")\n","        print(f\"  Fold {fold + 1} - Validation Loss: {val_loss:.4f}, Validation Accuracy: {val_acc:.2f}%\\n\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0CvjXjgG58rS","executionInfo":{"status":"ok","timestamp":1732513583718,"user_tz":300,"elapsed":1769710,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"}},"outputId":"5f7f4aeb-782e-42c3-c824-46783e14877b"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stderr","text":["Some weights of ViTForImageClassification were not initialized from the model checkpoint at google/vit-base-patch16-224-in21k and are newly initialized: ['classifier.bias', 'classifier.weight']\n","You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","<ipython-input-49-4a8e2125f674>:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  base_model.load_state_dict(torch.load(no_mask_model_path))\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/3\n","  Fold 1 - Train Loss: 2.1421, Train Accuracy: 45.45%\n","  Fold 1 - Validation Loss: 1.6106, Validation Accuracy: 59.85%\n","\n","  Fold 2 - Train Loss: 0.9446, Train Accuracy: 74.62%\n","  Fold 2 - Validation Loss: 0.5963, Validation Accuracy: 83.59%\n","\n","  Fold 3 - Train Loss: 0.5180, Train Accuracy: 86.10%\n","  Fold 3 - Validation Loss: 0.3543, Validation Accuracy: 90.89%\n","\n","  Fold 4 - Train Loss: 0.2630, Train Accuracy: 92.67%\n","  Fold 4 - Validation Loss: 0.1565, Validation Accuracy: 95.19%\n","\n","Epoch 2/3\n","  Fold 1 - Train Loss: 0.1753, Train Accuracy: 94.60%\n","  Fold 1 - Validation Loss: 0.0921, Validation Accuracy: 98.74%\n","\n","  Fold 2 - Train Loss: 0.1145, Train Accuracy: 96.88%\n","  Fold 2 - Validation Loss: 0.0487, Validation Accuracy: 99.24%\n","\n","  Fold 3 - Train Loss: 0.0545, Train Accuracy: 98.48%\n","  Fold 3 - Validation Loss: 0.0590, Validation Accuracy: 98.73%\n","\n","  Fold 4 - Train Loss: 0.0299, Train Accuracy: 99.66%\n","  Fold 4 - Validation Loss: 0.0247, Validation Accuracy: 99.49%\n","\n","Epoch 3/3\n","  Fold 1 - Train Loss: 0.0203, Train Accuracy: 99.66%\n","  Fold 1 - Validation Loss: 0.0156, Validation Accuracy: 100.00%\n","\n","  Fold 2 - Train Loss: 0.0130, Train Accuracy: 99.83%\n","  Fold 2 - Validation Loss: 0.0190, Validation Accuracy: 99.75%\n","\n","  Fold 3 - Train Loss: 0.0191, Train Accuracy: 99.66%\n","  Fold 3 - Validation Loss: 0.0234, Validation Accuracy: 99.49%\n","\n","  Fold 4 - Train Loss: 0.0248, Train Accuracy: 99.24%\n","  Fold 4 - Validation Loss: 0.0205, Validation Accuracy: 99.75%\n","\n"]}]},{"cell_type":"code","source":["# Test dataset and loader\n","test_dataset = PowerPlantDatasetWithMasks(filtered_image_groups, test_ids, transform, use_mask=True)\n","test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)\n","\n","def evaluate_on_test(model, test_loader, device):\n","    from sklearn.metrics import classification_report, confusion_matrix\n","\n","    model.eval()\n","    all_preds = []\n","    all_labels = []\n","\n","    with torch.no_grad():\n","        for images, masks, labels in test_loader:\n","            images, masks, labels = images.to(device), masks.to(device), labels.to(device)\n","            outputs = model(images, masks)\n","            _, predicted = torch.max(outputs, 1)\n","            all_preds.extend(predicted.cpu().numpy())\n","            all_labels.extend(labels.cpu().numpy())\n","\n","    print(\"Classification Report:\")\n","    print(classification_report(all_labels, all_preds, target_names=['WND', 'SUN', 'BIT', 'NG', 'WAT']))\n","    print(\"Confusion Matrix:\")\n","    print(confusion_matrix(all_labels, all_preds))\n","\n","# Evaluate on test set\n","evaluate_on_test(fusion_model, test_loader, device)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lm2_5iY36S_R","executionInfo":{"status":"ok","timestamp":1732513825886,"user_tz":300,"elapsed":235794,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"}},"outputId":"e5d8ff2c-db40-4cd6-b0eb-26836d08509b"},"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report:\n","              precision    recall  f1-score   support\n","\n","         WND       0.94      0.85      0.89        89\n","         SUN       0.87      0.88      0.88       212\n","         BIT       0.61      0.40      0.48        35\n","          NG       0.80      0.82      0.81       230\n","         WAT       0.82      0.91      0.87       113\n","\n","    accuracy                           0.84       679\n","   macro avg       0.81      0.77      0.79       679\n","weighted avg       0.84      0.84      0.83       679\n","\n","Confusion Matrix:\n","[[ 76   4   1   5   3]\n"," [  3 187   1  14   7]\n"," [  0   0  14  20   1]\n"," [  2  24   4 189  11]\n"," [  0   0   3   7 103]]\n"]}]},{"cell_type":"code","source":["save_path = '/content/drive/MyDrive/models/vit_model_with_mask_2.pth'\n","\n","torch.save(model.state_dict(), save_path)\n","print(f\"Model saved to {save_path}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8GuAZyzlX79U","executionInfo":{"status":"ok","timestamp":1732513861867,"user_tz":300,"elapsed":1012,"user":{"displayName":"Blessing Austin-Gabriel","userId":"06537092845109963796"}},"outputId":"eb19715d-8470-4b89-98f5-9a39200483c2"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["Model saved to /content/drive/MyDrive/models/vit_model_with_mask_2.pth\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"CPJ44oWA34wQ"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"machine_shape":"hm","provenance":[],"authorship_tag":"ABX9TyMBN/aZgoEJ1N0GB0qtuOf3"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"7a940f0d95c24e53a3e913384cbdcde3":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_2fe176478a894307bc62a6df4be67a39","IPY_MODEL_83b942c94a3b4a9791fd1f37481b5e55","IPY_MODEL_1bc9a71fdeb646de8b4ea765561e716d"],"layout":"IPY_MODEL_1038809f00f44c1d8a10412a0a745657"}},"2fe176478a894307bc62a6df4be67a39":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_47014c5c4cfa401b8fc4f710ff8e0007","placeholder":"​","style":"IPY_MODEL_bce91a13aac4447291bbd4b2cceca67f","value":"config.json: 100%"}},"83b942c94a3b4a9791fd1f37481b5e55":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_bb5d11eb8c734ed9a01038f4d36f7bdf","max":502,"min":0,"orientation":"horizontal","style":"IPY_MODEL_39dea993186b4a439504592a115b4e1e","value":502}},"1bc9a71fdeb646de8b4ea765561e716d":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_2c738cec7c964b77a771e0dedbe5f7b0","placeholder":"​","style":"IPY_MODEL_ea792b859bde44f188e11dbfd8f612c3","value":" 502/502 [00:00&lt;00:00, 37.4kB/s]"}},"1038809f00f44c1d8a10412a0a745657":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"47014c5c4cfa401b8fc4f710ff8e0007":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"bce91a13aac4447291bbd4b2cceca67f":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"bb5d11eb8c734ed9a01038f4d36f7bdf":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"39dea993186b4a439504592a115b4e1e":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"2c738cec7c964b77a771e0dedbe5f7b0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ea792b859bde44f188e11dbfd8f612c3":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"fe49dcc5bd2b4791b9c1efdd7ef90da1":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_ac6e408382ee46eaaea1fd60f492db62","IPY_MODEL_20558f5bfef64e38a4d7624b400a15f8","IPY_MODEL_78a37c931f104b15a7a2e6262f4479d9"],"layout":"IPY_MODEL_4c6a217eadf743af8e6f7a4c94259e90"}},"ac6e408382ee46eaaea1fd60f492db62":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_8283a440962a427cb5842daad19a0005","placeholder":"​","style":"IPY_MODEL_a4fef16549474016825e76ea1218bc14","value":"model.safetensors: 100%"}},"20558f5bfef64e38a4d7624b400a15f8":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_f5c6c481024c454eba2977587c16d0e6","max":345579424,"min":0,"orientation":"horizontal","style":"IPY_MODEL_5c61926598d640baaa6806efb8bec72b","value":345579424}},"78a37c931f104b15a7a2e6262f4479d9":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_31b9100f92bf430e8d81122bad4cd737","placeholder":"​","style":"IPY_MODEL_67d5abbad1d4440d84e6709ab4dd53ee","value":" 346M/346M [00:01&lt;00:00, 229MB/s]"}},"4c6a217eadf743af8e6f7a4c94259e90":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8283a440962a427cb5842daad19a0005":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a4fef16549474016825e76ea1218bc14":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"f5c6c481024c454eba2977587c16d0e6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5c61926598d640baaa6806efb8bec72b":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"31b9100f92bf430e8d81122bad4cd737":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"67d5abbad1d4440d84e6709ab4dd53ee":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"nbformat":4,"nbformat_minor":0}